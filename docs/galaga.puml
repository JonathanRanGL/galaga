@startuml galaga

class Abeja
{
    - sf::Texture texture
    - float scaleX
    - float scaleY
    - sf::SoundBuffer buffer
    - sf::Sound death
    - int hitCount

    + void innitVariables()
    + void innitTexture()
    + void innitSprite()
    + void innitSound()
    + void playDeathSound()
    + void playDamageSound()
    + void takeHit()
    + int getHitCount()
    + Abeja(float posX = 0.f, float posY = 0.f)
    + ~Abeja()
}


class Enemigo
{
    - sf::Sprite enemigo
    - double speed 
    - int tipo 
    - int movDirection 
    - std::vector<Proyectil*> proyectiles
    
    + void innitVariables()
    + void innitShape()
    + void setToXY(float posX, float posY)
    + void moveUp()
    + void moveDown()
    + void moveLeft()
    + void moveRight()
    + void  moveDiagDownRight(float factorX = 1.f, float factorY = 1.f)
    + void moveDiagDownLeft(float factorX = 1.f, float factorY = 1.f)
    + void moveDiagUpRight(float factorX = 1.f, float factorY = 1.f)
    + void moveDiagUpLeft(float factorX = 1.f, float factorY = 1.f)
    + void shoot()
    + void updateProyectiles()
    + void deleteProyectil(int index)
    + int getProyectilesSize()
    + const sf::FloatRect getProyectilesBounds(int i)
    + void update()
    + void render(sf::RenderTarget *target)
    +  float getSpeed()
    + float getXPos()
    + float getYPos()
    + int getType()
    + const sf::FloatRect getBounds() const
    + Enemigo(float posX = 0.f, float posY = 0.f)
    + ~Enemigo()
}

class Game
{
    - bool endGame
    - bool firstEnemy
    - float moveStep
    - bool isSorted
    - float type
    - float xPosArray[8]
    - float yPosType1
    - float yposType2[2]
    - float yposType3[2]
    - bool slotStateType1[8]
    - bool slotStateType2R1[8]
    - bool slotStateType2R2[8]
    - bool slotStateType3R1[8]
    - bool slotStateType3R2[8]
    - bool type1Full
    - bool type2Full
    - bool type3Full
    - bool slotReseted
    - float sortX
    - float sortY
    - int randAX
    - int randAY
    - bool readyToSort
    - int enemySpawnReset
    - int trajectoryPicked
    - int j
    - int yDelete
    - int typeToGenerate
    - int timerToSpawn
    - int timerToSpawnLimit
    - sf::RenderWindow *window
    - sf::VideoMode videoMode
    - sf::Event event
    - Nave *nave
    - using EnemigosActivos = std::variant<Abeja *, Mariposa *, Jefe *>
    - std::vector<EnemigosActivos> enemigosActivos
    - std::vector<int> enemySorted
    - void initVariables()
    - void initWindow()
    - void initEntities()
    
    + const bool running() const
    + const bool getEndGame() const
    + bool isType1Full()
    + bool isType2Full()
    + bool isType3Full()
    + void pollEvents()
    + bool runTrajectoryGEN1(int i)
    + void sortEnemyGEN(int i)
    + void checkForHits()
    + void updateEnemigos()
    + void updateNave()
    + void update()
    + void render()
    
    + Game()
    + ~Game()
}

class Jefe
{
    - sf::Texture texture
    - float scaleX
    - float scaleY
    - int hitCount
    - sf::SoundBuffer buffer
    - sf::Sound damage
    - sf::Sound death
    - void innitVariables()

    + void innitTexture()
    + void innitSprite()
    + void playDeathSound()
    + void playDamageSound()
    + void takeHit()
    + int getHitCount()

    + Jefe(float posX = 0.f, float posY = 0.f)
    + ~Jefe()
}

class Jugador
{
    Jugador()
    ~Jugador()
}

class Mariposa
{
    - sf::Texture texture
    - float scaleX
    - float scaleY
    - sf::SoundBuffer buffer
    - sf::Sound death
    - int hitCount
    - void innitVariables()

    + void innitTexture()
    + void innitSprite()
    + void innitSound()
    + void playDeathSound()
    + void playDamageSound()
    + void takeHit()
    + int getHitCount()

    + Mariposa(float posX = 0.f, float posY = 0.f)
    + ~Mariposa()
}

class Nave
{
    - sf::Sprite nave
    - sf::Texture texture
    - sf::SoundBuffer buffer
    - sf::Sound disparo
    - sf::SoundBuffer bufferHit
    - sf::Sound hit
    - sf::SoundBuffer bufferRespawn
    - sf::Sound respawn
    - double speed
    - float shootCooldown
    - float shootCooldownLimit
    - int remainingLives
    - std::vector<Proyectil *> proyectiles

    + void innitTexture()
    + void innitSprite()
    + void innitSound()
    + void innitVariables()
    + void updateInput()
    + void updateBoundCollsion(const sf::RenderTarget *target)
    + void updateCooldown()
    + const bool canShoot()
    + void updateProyectiles()
    + void deleteProyectil(int index)
    + void update(const sf::RenderTarget *target)
    + void render(sf::RenderTarget *target)
    + int getProyectilesSize()
    + const sf::FloatRect getProyectilesBounds(int i)
    + const sf::FloatRect getBounds() const
    + void playDestroyedSound()
    + void playRespawnSound()
    + void resetPosition()
    + int takeHit()
    + void setDefaultTexture()
    + void setDestroyedTexture1()
    + void setDestroyedTexture2()
    + void setDestroyedTexture3()
    + void setDestroyedTexture4()
    + void setDestroyedTexture5()

    + Nave(float posX = -1.f, float posY = -1.f)
    + ~Nave()
}


class Proyectil
{
    - sf::RectangleShape proyectil
    - sf::Vector2f direction
    -float muzzleVelocity

    + void innitVariables()
    + void innitProyectil()
    + void update()
    + void render(sf::RenderTarget *target)
    + const sf::FloatRect getBounds() const

    + Proyectil(float dirX, float dirY, float posX, float posY)
    + ~Proyectil()
}

class Puntaje
{
    - sf::Font font
    - sf::Text puntajeText
    - int puntaje

    + void aggPuntuacion (int puntos)
    + void updateText()
    + void updateText()

    + Puntaje()
    + ~Puntaje()
}


Game  "1" *-- "1" Jugador

Jugador "1" *-- "3" Vida
Nave "1" o-- "*" Proyectil
Enemigo "1" o-- "*" Proyectil
Jugador "1" *-- "1" Puntaje

Alien --|> Enemigo
Jefe --|> Alien
Abeja --|> Alien
Mariposa --|> Alien

Proyectil o-- Colisionable
Enemigo --|> Colisionable
Nave --|> Colisionable

@enduml